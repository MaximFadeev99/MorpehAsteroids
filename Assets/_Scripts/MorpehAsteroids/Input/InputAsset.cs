//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/_Scripts/MorpehAsteroids/Input/InputAsset.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

namespace MorpehAsteroids.Input
{
    public partial class @InputAsset: IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @InputAsset()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputAsset"",
    ""maps"": [
        {
            ""name"": ""PCMap"",
            ""id"": ""7984bbe6-4b5d-4cce-ad75-c3f01a2d2a9c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""47f5bfb8-329a-4668-9016-c5c7357a3b4a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""ac9317d2-fa43-4f5e-b6f3-e5bdfe459673"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""5e0f0913-cc69-4395-be1d-2d43b02bb1cf"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""ChangeWeapon"",
                    ""type"": ""Value"",
                    ""id"": ""57f3e180-6604-420d-9a65-8f5506db1341"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""a9035f0c-cd5b-4070-8081-81730133d637"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""61f0085e-833e-4eec-b25e-f1a802c6582c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""7ebe2870-e8a3-4b71-9156-e8e39685142e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d9b421f2-40fe-4494-a807-3adeb6cbdb79"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0a7d0ffa-8e8d-4731-bfa1-b89f5df1f44d"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""be3bf70e-93f5-4e82-924d-960fd253a7fd"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0089e19e-3552-40a0-ae5b-de157e37fac5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""520ceda8-90eb-48a1-980d-21ab12acd3c7"",
                    ""path"": ""<Mouse>/scroll"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ChangeWeapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // PCMap
            m_PCMap = asset.FindActionMap("PCMap", throwIfNotFound: true);
            m_PCMap_Move = m_PCMap.FindAction("Move", throwIfNotFound: true);
            m_PCMap_MousePosition = m_PCMap.FindAction("MousePosition", throwIfNotFound: true);
            m_PCMap_Attack = m_PCMap.FindAction("Attack", throwIfNotFound: true);
            m_PCMap_ChangeWeapon = m_PCMap.FindAction("ChangeWeapon", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // PCMap
        private readonly InputActionMap m_PCMap;
        private List<IPCMapActions> m_PCMapActionsCallbackInterfaces = new List<IPCMapActions>();
        private readonly InputAction m_PCMap_Move;
        private readonly InputAction m_PCMap_MousePosition;
        private readonly InputAction m_PCMap_Attack;
        private readonly InputAction m_PCMap_ChangeWeapon;
        public struct PCMapActions
        {
            private @InputAsset m_Wrapper;
            public PCMapActions(@InputAsset wrapper) { m_Wrapper = wrapper; }
            public InputAction @Move => m_Wrapper.m_PCMap_Move;
            public InputAction @MousePosition => m_Wrapper.m_PCMap_MousePosition;
            public InputAction @Attack => m_Wrapper.m_PCMap_Attack;
            public InputAction @ChangeWeapon => m_Wrapper.m_PCMap_ChangeWeapon;
            public InputActionMap Get() { return m_Wrapper.m_PCMap; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(PCMapActions set) { return set.Get(); }
            public void AddCallbacks(IPCMapActions instance)
            {
                if (instance == null || m_Wrapper.m_PCMapActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_PCMapActionsCallbackInterfaces.Add(instance);
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @ChangeWeapon.started += instance.OnChangeWeapon;
                @ChangeWeapon.performed += instance.OnChangeWeapon;
                @ChangeWeapon.canceled += instance.OnChangeWeapon;
            }

            private void UnregisterCallbacks(IPCMapActions instance)
            {
                @Move.started -= instance.OnMove;
                @Move.performed -= instance.OnMove;
                @Move.canceled -= instance.OnMove;
                @MousePosition.started -= instance.OnMousePosition;
                @MousePosition.performed -= instance.OnMousePosition;
                @MousePosition.canceled -= instance.OnMousePosition;
                @Attack.started -= instance.OnAttack;
                @Attack.performed -= instance.OnAttack;
                @Attack.canceled -= instance.OnAttack;
                @ChangeWeapon.started -= instance.OnChangeWeapon;
                @ChangeWeapon.performed -= instance.OnChangeWeapon;
                @ChangeWeapon.canceled -= instance.OnChangeWeapon;
            }

            public void RemoveCallbacks(IPCMapActions instance)
            {
                if (m_Wrapper.m_PCMapActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(IPCMapActions instance)
            {
                foreach (var item in m_Wrapper.m_PCMapActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_PCMapActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public PCMapActions @PCMap => new PCMapActions(this);
        public interface IPCMapActions
        {
            void OnMove(InputAction.CallbackContext context);
            void OnMousePosition(InputAction.CallbackContext context);
            void OnAttack(InputAction.CallbackContext context);
            void OnChangeWeapon(InputAction.CallbackContext context);
        }
    }
}
